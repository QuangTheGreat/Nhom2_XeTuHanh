;====================================================================
; Main.asm file generated by New Project wizard
;
; Created:   Tue Mar 19 2024
; Processor: AT89C51
; Compiler:  ASEM-51 (Proteus)
;====================================================================

$NOMOD51
$INCLUDE (8051.MCU)

;====================================================================
; DEFINITIONS
;====================================================================

tmid BIT p2.0
emid BIT p2.1
dis DATA 30h
in1 BIT p1.0
in2 BIT p1.1
deci DATA 35h
disl DATA 31h
disr DATA 32h
tleft BIT p2.2
eleft BIT p2.3
tright BIT p2.4
eright BIT p2.5
button BIT 20h.0
cao BIT 21h.0
fleft BIT 22h.0
fright BIT 23h.0
fmid  BIT 24h.0
lui BIT 24h.1
check BIT 24h.2
check2 BIT 24h.3
;====================================================================
; VARIABLES
;====================================================================

;====================================================================
; RESET and INTERRUPT VECTORS
;====================================================================

      ; Reset Vector
      org   0000h
      ljmp  Start
      
      org 0003h
      ljmp exint0

      org 001bh
      ljmp BAM_XUNG
      

;====================================================================
; CODE SEGMENT
;====================================================================
      org 0100h
      GET_DISTANCE:
      MOV R1,#5
      MOV TH0, #high(0)
      MOV TL0, #low(0)
      SETB tmid 
      DJNZ R1,$
      CLR tmid
      JNB emid,$
      SETB tr0
      JB emid, $
      CLR tr0
      MOV dis,TH0
      MOV A,TH0
      CLR PSW.7
      SUBB A,#13
      JB PSW.7, less35
      MOV deci,#0
      RET
      less35:
      lcall GET_DISTANCE_LEFT
      lcall GET_DISTANCE_RIGHT
      lcall GET_DECISION
      ret
      
      GET_DISTANCE_LEFT:
      MOV R1,#5
      MOV TH0, #high(0)
      MOV TL0, #low(0)
      SETB tleft
      DJNZ R1,$
      CLR tleft
      JNB eleft,$
      SETB tr0
      JB eleft, $
      CLR tr0
      MOV disl,TH0
      RET
      
      GET_DISTANCE_MID:
      MOV R1,#5
      MOV TH0, #high(0)
      MOV TL0, #low(0)
      SETB tmid
      DJNZ R1,$
      CLR tmid
      JNB emid,$
      SETB tr0
      JB emid, $
      CLR tr0
      MOV dis,TH0
      RET
      
      GET_DISTANCE_RIGHT:
      MOV  R1,#5
      MOV TH0, #high(0)
      MOV TL0, #low(0)
      SETB tright
      DJNZ R1,$
      CLR tright
      JNB eright,$
      SETB tr0
      JB eright, $
      CLR tr0
      MOV disr,TH0
      RET

      
      GET_DECISION:
      MOV A,disl
      MOV R4,disr
      CLR PSW.7
      SUBB A,R4
      JB PSW.7, TURN_RIGHT
      MOV A,disl
      CLR PSW.7
      SUBB A,#9
      JNB PSW.7, LEFT_GREATER_40
      MOV deci,#0
      SETB lui
      RET
      LEFT_GREATER_40:
      MOV deci,#1
      RET
      TURN_RIGHT:
      MOV A,disr
      CLR PSW.7
      subb A,#9
      JNB PSW.7, RIGHT_GREATER_40
      MOV deci,#0
      SETB lui
      RET
      RIGHT_GREATER_40:
      MOV deci,#2
      RET
      
      BAM_XUNG:
      JB button, BAM_XUNG_NEXT
      LJMP BAM_XUNG2
      BAM_XUNG_NEXT:
      JB fmid, mid
      JB fleft, left
      JB fright, right
      MOV R0,deci
      CJNE R0, #0 ,left
      mid:
      JNB cao, thap
      JNB lui , DI_THANG
      CLR in1
      CPL in2
      SJMP BAM_XUNG_LUI
      DI_THANG:
      SETB in1
      CPL in2
      BAM_XUNG_LUI:
      CLR tr1
      CLR tf1
      CLR cao
      SETB fmid
      MOV TH1,#high(64026)
      MOV TL1,#low(64026)
      SETB p1.7
      SETB tr1
      RETI
      thap:
      CLR tf1
      CLR tr1
      SETB cao
      CLR fmid
      MOV TH1,#high(47046)
      MOV TL1,#low(47046)
      CLR p1.7
      SETB TR1
      RETI
      left:
      CJNE R0,#1,right
      JNB cao, thapleft
      SETB in1
      CPL in2
      CLR tr1
      CLR tf1
      CLR cao
      SETB fleft
      MOV TH1,#high(64546)
      MOV TL1,#low(64546)
      SETB p1.7
      SETB tr1
      RETI
      thapleft:
      CLR tf1
      CLR tr1
      SETB cao
      CLR fleft
      MOV TH1,#high(46526)
      MOV TL1,#low(46526)
      CLR p1.7
      SETB TR1
      RETI
      right:
      JNB cao,thapright
      SETB in1
      CPL in2
      CLR tr1
      CLR tf1
      CLR cao
      SETB fright
      MOV TH1,#high(63566)
      MOV TL1,#low(63566)
      SETB p1.7
      SETB tr1
      RETI
      thapright:
      CLR tf1
      CLR tr1
      SETB cao
      CLR fright
      MOV TH1,#high(47506)
      MOV TL1,#low(47506)
      CLR p1.7
      SETB TR1
      RETI

      BAM_XUNG2:
      JB fmid, mid2
      JB fleft, left2
      JB fright, right2
      MOV R0,deci
      CJNE R0, #0 ,left2
      mid2:
      JNB cao, thap2
      JNB lui , DI_THANG2
      CLR in1
      CPL in2
      SJMP BAM_XUNG_LUI2
      DI_THANG2:
      setb in1
      cpl in2
      BAM_XUNG_LUI2:
      CLR tr1
      CLR tf1
      CLR cao
      SETB fmid
      MOV TH1,#high(64026)
      MOV TL1,#low(64026)
      SETB p1.7
      SETB tr1
      RETI
      thap2:

      CLR tf1
      CLR tr1
      SETB cao
      CLR fmid
      MOV TH1,#high(47046)
      MOV TL1,#low(47046)
      CLR p1.7
      SETB TR1
      RETI
      left2:
      CJNE R0,#1,right2
      JNB cao, thapleft2
      SETB in1
      CPL in2
      CLR tr1
      CLR tf1
      CLR cao
      SETB fleft
      MOV TH1,#high(64336)
      MOV TL1,#low(64336)
      SETB p1.7
      SETB tr1
      RETI
      thapleft2:
      CLR tf1
      CLR tr1
      SETB cao
      CLR fleft
      MOV TH1,#high(46736)
      MOV TL1,#low(46736)
      CLR p1.7
      SETB TR1
      RETI
      right2:
      JNB cao,thapright2
      SETB in1
      CPL in2
      CLR tr1
      CLR tf1
      CLR cao
      SETB fright
      MOV TH1,#high(63736)
      MOV TL1,#low(63736)
      SETB p1.7
      SETB tr1
      RETI
      thapright2:
      CLR tf1
      CLR tr1
      SETB cao
      CLR fright
      MOV TH1,#high(47336)
      MOV TL1,#low(47336)
      CLR p1.7
      SETB TR1
      RETI
     
     exint0:
     cpl button
     reti
     
     TEMPLABEL:
     LJMP NORMAL
     

Start:	
      mov TMOD, #00010001b
      mov IE, #10001001b
      setb IT0
      setb button
      clr tmid
      clr tleft
      clr tright
      setb in1
      clr in2
      setb cao
      CLR check
      CLR check2
      clr fmid
      clr fleft
      clr fright
      clr lui
      mov deci,#0
      mov TH1,#high(63536)
      mov TL1,#low(63536)
      setb tr1
Loop:	
      JNB lui, TEMPLABEL
      MOV R1,#5
      MOV TH0, #high(0)
      MOV TL0, #low(0)
      SETB tmid 
      DJNZ R1,$
      CLR tmid
      JNB emid,$
      SETB tr0
      JB emid, $
      CLR tr0
      MOV dis,TH0
      MOV A,dis
      CLR PSW.7
      SUBB A,#19
      JB PSW.7, TEMP
      mov deci,#0
      CLR lui
      JMP Loop
      TEMP:
      JB check2, CONTINUE
      LCALL GET_DISTANCE_LEFT
      MOV A,disl
      CLR PSW.7
      SUBB A,#12
      JB PSW.7, CONTINUE
      SETB check
      MOV deci,#1
      JMP Loop
      CONTINUE:
      JB check, CONTINUE2
      LCALL GET_DISTANCE_RIGHT
      MOV A,disr
      CLR PSW.7
      SUBB A,#12
      JB PSW.7, CONTINUE2
      SETB check2
      MOV deci,#2
      JMP Loop
      CONTINUE2:
      JNB check, CHECK_RIGHT
      MOV A,disl
      CLR PSW.7
      SUBB A,#9
      JNB PSW.7, CONTINUE3
      MOV deci,#0
      JMP Loop
      CHECK_RIGHT:
      MOV A,disr
      CLR PSW.7
      SUBB A,#9
      JNB PSW.7, CONTINUE3
      MOV deci,#0
      JMP Loop
      CONTINUE3:
      MOV R1,#5
      MOV TH0, #high(0)
      MOV TL0, #low(0)
      SETB tmid 
      DJNZ R1,$
      CLR tmid	
      JNB emid,$
      SETB tr0
      JB emid, $
      CLR tr0
      MOV dis,TH0
      MOV A,dis
      CLR PSW.7
      SUBB A,#9
      JNB PSW.7, endlabel
      mov deci,#0
      SETB lui
      JMP Loop
      NORMAL:
      CLR check
      CLR check2
      lcall GET_DISTANCE
      endlabel:
      jmp Loop
      
      END